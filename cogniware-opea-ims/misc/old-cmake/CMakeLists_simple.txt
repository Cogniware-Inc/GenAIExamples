cmake_minimum_required(VERSION 3.15)

# Set C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Project name and version
project(msmartcompute_engine VERSION 0.1.0)

# Find required packages
find_package(OpenMP REQUIRED)
find_package(ZLIB REQUIRED)
find_package(CURL REQUIRED)
find_package(Python3 3.8 REQUIRED COMPONENTS Interpreter Development)
find_package(pybind11 REQUIRED)
find_package(GTest REQUIRED)

# Find additional dependencies
find_package(PkgConfig REQUIRED)
pkg_check_modules(UUID REQUIRED uuid)

# Find custom packages
find_package(JsonCpp REQUIRED)
find_package(Spdlog REQUIRED)

# Find Threads
find_package(Threads REQUIRED)

# Add source files (excluding problematic ones)
file(GLOB_RECURSE SOURCES 
    "src/core/*.cpp" 
    "src/core/*.cu"
    "src/virtualization/*.cu"
    "src/knowledge_training_interface/*.cpp"
    "src/knowledge_training_interface/*.cu"
    "src/llm_inference_core/*.cpp"
    "src/llm_inference_core/*.cu"
    "src/llm_inference/*.cpp"
    "src/llm_inference/*.cu"
)

file(GLOB_RECURSE HEADERS 
    "include/*.hpp" 
    "include/*.h"
    "include/core/*.h"
    "include/virtualization/*.h"
    "include/knowledge_training_interface/*.h"
    "include/llm_inference_core/*.h"
    "include/llm_inference/*.h"
)

# Create library
add_library(msmartcompute_engine SHARED ${SOURCES} ${HEADERS})

# Set include directories
target_include_directories(msmartcompute_engine
    PUBLIC
    ${CMAKE_CURRENT_SOURCE_DIR}/include
    ${OpenMP_CXX_INCLUDE_DIRS}
    ${ZLIB_INCLUDE_DIRS}
    ${CURL_INCLUDE_DIRS}
    ${Python3_INCLUDE_DIRS}
    ${UUID_INCLUDE_DIRS}
    ${JSONCPP_INCLUDE_DIRS}
    ${SPDLOG_INCLUDE_DIRS}
    PRIVATE
    ${CMAKE_CURRENT_SOURCE_DIR}/src
)

# Link libraries
target_link_libraries(msmartcompute_engine
    ${OpenMP_CXX_LIBRARIES}
    ${ZLIB_LIBRARIES}
    ${CURL_LIBRARIES}
    ${Python3_LIBRARIES}
    ${UUID_LIBRARIES}
    ${JSONCPP_LIBRARIES}
    ${SPDLOG_LIBRARIES}
    Threads::Threads
)

# Set properties
set_target_properties(msmartcompute_engine PROPERTIES
    CXX_STANDARD 17
    CXX_STANDARD_REQUIRED ON
    POSITION_INDEPENDENT_CODE ON
)

# Enable testing
enable_testing()

# Add tests if they exist
if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/tests")
    add_subdirectory(tests)
endif()

# Install targets
install(TARGETS msmartcompute_engine
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib
    RUNTIME DESTINATION bin
)

install(DIRECTORY include/ DESTINATION include)
