version: '3.8'

services:
  # CogniWare Platform
  cogniware:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: cogniware-platform
    ports:
      - "8080:8080"
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
    volumes:
      - ./models:/opt/cogniware/models:ro
      - ./logs:/opt/cogniware/logs
      - ./cache:/opt/cogniware/cache
      - ./temp:/opt/cogniware/temp
    # GPU support can be enabled by uncommenting the following lines:
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: all
    #           capabilities: [gpu]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - cogniware-network

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: cogniware-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    networks:
      - cogniware-network

  # PostgreSQL for metadata storage
  postgres:
    image: postgres:15-alpine
    container_name: cogniware-postgres
    environment:
      POSTGRES_DB: cogniware
      POSTGRES_USER: cogniware
      POSTGRES_PASSWORD: cogniware123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    restart: unless-stopped
    networks:
      - cogniware-network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: cogniware-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - cogniware-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: cogniware-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    restart: unless-stopped
    networks:
      - cogniware-network
    depends_on:
      - prometheus

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: cogniware-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    restart: unless-stopped
    networks:
      - cogniware-network
    depends_on:
      - cogniware

  # Test client for API testing
  test-client:
    image: curlimages/curl:latest
    container_name: cogniware-test-client
    depends_on:
      - cogniware
    networks:
      - cogniware-network
    command: >
      sh -c "
        echo 'Waiting for CogniWare platform to start...' &&
        sleep 30 &&
        echo 'Testing health endpoint...' &&
        curl -f http://cogniware:8080/health &&
        echo 'Testing API endpoints...' &&
        curl -X GET http://cogniware:8080/api/v1/models &&
        echo 'Platform is ready for testing!'
      "

volumes:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  cogniware-network:
    driver: bridge 