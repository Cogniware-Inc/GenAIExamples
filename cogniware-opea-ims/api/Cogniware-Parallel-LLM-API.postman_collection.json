{
  "info": {
    "name": "Cogniware Parallel LLM API",
    "description": "Patent-Compliant Parallel LLM Execution API - Multi-Context Processing (MCP)",
    "version": "2.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{access_token}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "admin_url",
      "value": "http://localhost:8099",
      "type": "string"
    },
    {
      "key": "production_url",
      "value": "http://localhost:8090",
      "type": "string"
    },
    {
      "key": "business_protected_url",
      "value": "http://localhost:8096",
      "type": "string"
    },
    {
      "key": "access_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "username",
      "value": "superadmin",
      "type": "string"
    },
    {
      "key": "password",
      "value": "Cogniware@2025",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "01. Authentication",
      "item": [
        {
          "name": "Login (Get Token)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();",
                  "if (jsonData.token) {",
                  "    pm.collectionVariables.set('access_token', jsonData.token);",
                  "    console.log('Token saved:', jsonData.token);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{username}}\",\n  \"password\": \"{{password}}\"\n}"
            },
            "url": {
              "raw": "{{admin_url}}/auth/login",
              "host": ["{{admin_url}}"],
              "path": ["auth", "login"]
            },
            "description": "Login to get JWT token for authentication"
          }
        }
      ]
    },
    {
      "name": "02. Cogniware Built-in LLMs",
      "item": [
        {
          "name": "Get All Cogniware LLMs",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{admin_url}}/admin/llm/cogniware/all",
              "host": ["{{admin_url}}"],
              "path": ["admin", "llm", "cogniware", "all"]
            },
            "description": "Get all 12 built-in Cogniware LLMs"
          }
        },
        {
          "name": "Get Interface LLMs",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{admin_url}}/admin/llm/cogniware/interface",
              "host": ["{{admin_url}}"],
              "path": ["admin", "llm", "cogniware", "interface"]
            },
            "description": "Get 7 interface LLMs for chat, code, etc."
          }
        },
        {
          "name": "Get Knowledge LLMs",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{admin_url}}/admin/llm/cogniware/knowledge",
              "host": ["{{admin_url}}"],
              "path": ["admin", "llm", "cogniware", "knowledge"]
            },
            "description": "Get 2 knowledge LLMs for Q&A and RAG"
          }
        },
        {
          "name": "Get Embedding LLMs",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{admin_url}}/admin/llm/cogniware/embedding",
              "host": ["{{admin_url}}"],
              "path": ["admin", "llm", "cogniware", "embedding"]
            },
            "description": "Get 2 embedding models for semantic search"
          }
        },
        {
          "name": "Get Specific LLM Details",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{admin_url}}/admin/llm/cogniware/cogniware-chat-7b",
              "host": ["{{admin_url}}"],
              "path": ["admin", "llm", "cogniware", "cogniware-chat-7b"]
            },
            "description": "Get details of a specific Cogniware LLM"
          }
        }
      ]
    },
    {
      "name": "03. Parallel LLM Execution (PATENT)",
      "item": [
        {
          "name": "Parallel Execution - Code Generation",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"instruction\": \"Generate Python code for Fibonacci series with count entered by user\",\n  \"use_parallel\": true,\n  \"strategy\": \"parallel\",\n  \"num_interface_llms\": 2,\n  \"num_knowledge_llms\": 1\n}"
            },
            "url": {
              "raw": "{{production_url}}/api/nl/process",
              "host": ["{{production_url}}"],
              "path": ["api", "nl", "process"]
            },
            "description": "PATENT: Execute with 2 Interface + 1 Knowledge LLMs in parallel"
          }
        },
        {
          "name": "Parallel Execution - Database Query",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"instruction\": \"Create SQL query to get top 10 customers by revenue last month\",\n  \"use_parallel\": true,\n  \"strategy\": \"parallel\",\n  \"num_interface_llms\": 1,\n  \"num_knowledge_llms\": 1\n}"
            },
            "url": {
              "raw": "{{production_url}}/api/nl/process",
              "host": ["{{production_url}}"],
              "path": ["api", "nl", "process"]
            },
            "description": "PATENT: Parallel execution for database queries"
          }
        },
        {
          "name": "Interface Only Strategy",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"instruction\": \"Write a hello world function in Python\",\n  \"use_parallel\": false,\n  \"strategy\": \"interface_only\"\n}"
            },
            "url": {
              "raw": "{{production_url}}/api/nl/process",
              "host": ["{{production_url}}"],
              "path": ["api", "nl", "process"]
            },
            "description": "Use only Interface LLMs (faster)"
          }
        },
        {
          "name": "Knowledge Only Strategy",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"instruction\": \"What is the Fibonacci sequence?\",\n  \"strategy\": \"knowledge_only\"\n}"
            },
            "url": {
              "raw": "{{production_url}}/api/nl/process",
              "host": ["{{production_url}}"],
              "path": ["api", "nl", "process"]
            },
            "description": "Use only Knowledge LLMs (information retrieval)"
          }
        },
        {
          "name": "Consensus Strategy",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"instruction\": \"Is this code secure?\",\n  \"strategy\": \"consensus\",\n  \"num_interface_llms\": 3\n}"
            },
            "url": {
              "raw": "{{production_url}}/api/nl/process",
              "host": ["{{production_url}}"],
              "path": ["api", "nl", "process"]
            },
            "description": "Multiple LLMs vote (highest quality)"
          }
        },
        {
          "name": "Get Parallel LLM Statistics",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{production_url}}/api/nl/statistics",
              "host": ["{{production_url}}"],
              "path": ["api", "nl", "statistics"]
            },
            "description": "Get patent-compliant parallel execution statistics"
          }
        }
      ]
    },
    {
      "name": "04. LLM Availability (Users)",
      "item": [
        {
          "name": "Get Available LLMs - Production",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{production_url}}/api/nl/llms/available",
              "host": ["{{production_url}}"],
              "path": ["api", "nl", "llms", "available"]
            },
            "description": "Get available LLMs for regular users (Production server)"
          }
        },
        {
          "name": "Get Available LLMs - Admin",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{admin_url}}/api/llms/available",
              "host": ["{{admin_url}}"],
              "path": ["api", "llms", "available"]
            },
            "description": "Get available LLMs (Admin server)"
          }
        },
        {
          "name": "List All LLMs",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{production_url}}/api/llms/list",
              "host": ["{{production_url}}"],
              "path": ["api", "llms", "list"]
            },
            "description": "List all 12 Cogniware LLMs with full details"
          }
        }
      ]
    },
    {
      "name": "05. External Model Sources",
      "item": [
        {
          "name": "Get External Sources",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{admin_url}}/admin/llm/sources/external",
              "host": ["{{admin_url}}"],
              "path": ["admin", "llm", "sources", "external"]
            },
            "description": "Get external sources (Ollama, HuggingFace) for importing models"
          }
        },
        {
          "name": "Get Ollama Models for Import",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{admin_url}}/admin/llm/sources/ollama",
              "host": ["{{admin_url}}"],
              "path": ["admin", "llm", "sources", "ollama"]
            },
            "description": "Get models available from Ollama for importing"
          }
        },
        {
          "name": "Get HuggingFace Models for Import",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{admin_url}}/admin/llm/sources/huggingface",
              "host": ["{{admin_url}}"],
              "path": ["admin", "llm", "sources", "huggingface"]
            },
            "description": "Get models available from HuggingFace for importing"
          }
        }
      ]
    },
    {
      "name": "06. Example Use Cases",
      "item": [
        {
          "name": "Example 1: Generate REST API",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"instruction\": \"Create a REST API in Python Flask for user management with CRUD operations\",\n  \"use_parallel\": true,\n  \"strategy\": \"parallel\",\n  \"num_interface_llms\": 2,\n  \"num_knowledge_llms\": 1\n}"
            },
            "url": {
              "raw": "{{production_url}}/api/nl/process",
              "host": ["{{production_url}}"],
              "path": ["api", "nl", "process"]
            },
            "description": "Generate complete REST API with parallel LLMs"
          }
        },
        {
          "name": "Example 2: Database Schema",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"instruction\": \"Design a PostgreSQL database schema for e-commerce with products, orders, customers, and payments\",\n  \"strategy\": \"parallel\",\n  \"num_interface_llms\": 1,\n  \"num_knowledge_llms\": 1\n}"
            },
            "url": {
              "raw": "{{production_url}}/api/nl/process",
              "host": ["{{production_url}}"],
              "path": ["api", "nl", "process"]
            },
            "description": "Generate database schema with best practices from knowledge LLM"
          }
        },
        {
          "name": "Example 3: Algorithm Implementation",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"instruction\": \"Implement quicksort algorithm in Python with detailed comments\",\n  \"strategy\": \"parallel\",\n  \"num_interface_llms\": 2,\n  \"num_knowledge_llms\": 1\n}"
            },
            "url": {
              "raw": "{{production_url}}/api/nl/process",
              "host": ["{{production_url}}"],
              "path": ["api", "nl", "process"]
            },
            "description": "Generate algorithm with explanatory context"
          }
        },
        {
          "name": "Example 4: Data Analysis Script",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"instruction\": \"Create Python script to analyze sales data from CSV and generate visualizations\",\n  \"strategy\": \"parallel\",\n  \"num_interface_llms\": 2,\n  \"num_knowledge_llms\": 1\n}"
            },
            "url": {
              "raw": "{{production_url}}/api/nl/process",
              "host": ["{{production_url}}"],
              "path": ["api", "nl", "process"]
            },
            "description": "Generate data analysis script with best practices"
          }
        }
      ]
    },
    {
      "name": "07. Performance Testing",
      "item": [
        {
          "name": "Test Speedup - Parallel vs Interface Only",
          "item": [
            {
              "name": "Parallel (2 Interface + 1 Knowledge)",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"instruction\": \"Create a binary search function in Python\",\n  \"strategy\": \"parallel\",\n  \"num_interface_llms\": 2,\n  \"num_knowledge_llms\": 1\n}"
                },
                "url": {
                  "raw": "{{production_url}}/api/nl/process",
                  "host": ["{{production_url}}"],
                  "path": ["api", "nl", "process"]
                }
              }
            },
            {
              "name": "Interface Only (Single LLM)",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"instruction\": \"Create a binary search function in Python\",\n  \"strategy\": \"interface_only\"\n}"
                },
                "url": {
                  "raw": "{{production_url}}/api/nl/process",
                  "host": ["{{production_url}}"],
                  "path": ["api", "nl", "process"]
                }
              }
            }
          ]
        },
        {
          "name": "Get Execution Statistics",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{production_url}}/api/nl/statistics",
              "host": ["{{production_url}}"],
              "path": ["api", "nl", "statistics"]
            },
            "description": "Get parallel LLM execution statistics and performance metrics"
          }
        }
      ]
    },
    {
      "name": "08. All Servers Test",
      "item": [
        {
          "name": "Admin Server (8099) - Parallel Execution",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"instruction\": \"Generate Python function to reverse a string\",\n  \"strategy\": \"parallel\"\n}"
            },
            "url": {
              "raw": "{{admin_url}}/api/nl/process",
              "host": ["{{admin_url}}"],
              "path": ["api", "nl", "process"]
            }
          }
        },
        {
          "name": "Production Server (8090) - Parallel Execution",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"instruction\": \"Generate Python function to check if number is prime\",\n  \"strategy\": \"parallel\"\n}"
            },
            "url": {
              "raw": "{{production_url}}/api/nl/process",
              "host": ["{{production_url}}"],
              "path": ["api", "nl", "process"]
            }
          }
        },
        {
          "name": "Business Protected (8096) - Parallel Execution",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"instruction\": \"Create function to validate email address\",\n  \"strategy\": \"parallel\"\n}"
            },
            "url": {
              "raw": "{{business_protected_url}}/api/nl/process",
              "host": ["{{business_protected_url}}"],
              "path": ["api", "nl", "process"]
            }
          }
        }
      ]
    }
  ]
}

